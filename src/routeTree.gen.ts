/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteRouteImport } from './routes/_public/route'
import { Route as AuthedRouteRouteImport } from './routes/_authed/route'
import { Route as AuthedIndexRouteImport } from './routes/_authed/index'
import { Route as PublicSign_upRouteImport } from './routes/_public/sign_up'
import { Route as PublicRecoveryRouteImport } from './routes/_public/recovery'
import { Route as PublicLoginRouteImport } from './routes/_public/login'
import { Route as PublicEmail_confirmRouteImport } from './routes/_public/email_confirm'
import { Route as PublicAuthConfirmRouteImport } from './routes/_public/auth.confirm'

const PublicRouteRoute = PublicRouteRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRouteRoute = AuthedRouteRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedIndexRoute = AuthedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const PublicSign_upRoute = PublicSign_upRouteImport.update({
  id: '/sign_up',
  path: '/sign_up',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicRecoveryRoute = PublicRecoveryRouteImport.update({
  id: '/recovery',
  path: '/recovery',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicLoginRoute = PublicLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicEmail_confirmRoute = PublicEmail_confirmRouteImport.update({
  id: '/email_confirm',
  path: '/email_confirm',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicAuthConfirmRoute = PublicAuthConfirmRouteImport.update({
  id: '/auth/confirm',
  path: '/auth/confirm',
  getParentRoute: () => PublicRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/email_confirm': typeof PublicEmail_confirmRoute
  '/login': typeof PublicLoginRoute
  '/recovery': typeof PublicRecoveryRoute
  '/sign_up': typeof PublicSign_upRoute
  '/': typeof AuthedIndexRoute
  '/auth/confirm': typeof PublicAuthConfirmRoute
}
export interface FileRoutesByTo {
  '/email_confirm': typeof PublicEmail_confirmRoute
  '/login': typeof PublicLoginRoute
  '/recovery': typeof PublicRecoveryRoute
  '/sign_up': typeof PublicSign_upRoute
  '/': typeof AuthedIndexRoute
  '/auth/confirm': typeof PublicAuthConfirmRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authed': typeof AuthedRouteRouteWithChildren
  '/_public': typeof PublicRouteRouteWithChildren
  '/_public/email_confirm': typeof PublicEmail_confirmRoute
  '/_public/login': typeof PublicLoginRoute
  '/_public/recovery': typeof PublicRecoveryRoute
  '/_public/sign_up': typeof PublicSign_upRoute
  '/_authed/': typeof AuthedIndexRoute
  '/_public/auth/confirm': typeof PublicAuthConfirmRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/email_confirm'
    | '/login'
    | '/recovery'
    | '/sign_up'
    | '/'
    | '/auth/confirm'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/email_confirm'
    | '/login'
    | '/recovery'
    | '/sign_up'
    | '/'
    | '/auth/confirm'
  id:
    | '__root__'
    | '/_authed'
    | '/_public'
    | '/_public/email_confirm'
    | '/_public/login'
    | '/_public/recovery'
    | '/_public/sign_up'
    | '/_authed/'
    | '/_public/auth/confirm'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthedRouteRoute: typeof AuthedRouteRouteWithChildren
  PublicRouteRoute: typeof PublicRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/': {
      id: '/_authed/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthedIndexRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_public/sign_up': {
      id: '/_public/sign_up'
      path: '/sign_up'
      fullPath: '/sign_up'
      preLoaderRoute: typeof PublicSign_upRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/recovery': {
      id: '/_public/recovery'
      path: '/recovery'
      fullPath: '/recovery'
      preLoaderRoute: typeof PublicRecoveryRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/email_confirm': {
      id: '/_public/email_confirm'
      path: '/email_confirm'
      fullPath: '/email_confirm'
      preLoaderRoute: typeof PublicEmail_confirmRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/auth/confirm': {
      id: '/_public/auth/confirm'
      path: '/auth/confirm'
      fullPath: '/auth/confirm'
      preLoaderRoute: typeof PublicAuthConfirmRouteImport
      parentRoute: typeof PublicRouteRoute
    }
  }
}

interface AuthedRouteRouteChildren {
  AuthedIndexRoute: typeof AuthedIndexRoute
}

const AuthedRouteRouteChildren: AuthedRouteRouteChildren = {
  AuthedIndexRoute: AuthedIndexRoute,
}

const AuthedRouteRouteWithChildren = AuthedRouteRoute._addFileChildren(
  AuthedRouteRouteChildren,
)

interface PublicRouteRouteChildren {
  PublicEmail_confirmRoute: typeof PublicEmail_confirmRoute
  PublicLoginRoute: typeof PublicLoginRoute
  PublicRecoveryRoute: typeof PublicRecoveryRoute
  PublicSign_upRoute: typeof PublicSign_upRoute
  PublicAuthConfirmRoute: typeof PublicAuthConfirmRoute
}

const PublicRouteRouteChildren: PublicRouteRouteChildren = {
  PublicEmail_confirmRoute: PublicEmail_confirmRoute,
  PublicLoginRoute: PublicLoginRoute,
  PublicRecoveryRoute: PublicRecoveryRoute,
  PublicSign_upRoute: PublicSign_upRoute,
  PublicAuthConfirmRoute: PublicAuthConfirmRoute,
}

const PublicRouteRouteWithChildren = PublicRouteRoute._addFileChildren(
  PublicRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthedRouteRoute: AuthedRouteRouteWithChildren,
  PublicRouteRoute: PublicRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
